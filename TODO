-*- org -*-

* HOWTO implement a TODO
  1. Checkout new branch
  2. TDD impl functionality
     1. Setup new simptestcase test
     2. Add test to CMakeLists.txt
     3. Watch test fail
     4. Implement
     5. Refactor
  3. Write program help
  4. Remove item from this file.
* Cleanup
** Remove debug-functions
* Defects
** --prepend-tags, --append-tags are mutualy exlusive
* Improvements
** Customize the instruction token
   Make it possible to specify the prefix for instruction lines via a command
   line switch.
** List
*** match file-name using reg-ex
** Source-file info in PreprocessorException
Currently, no source-info is included in case of error of preprocessor.

It is a minor issue, since the preprocessor is independent of the file
argument (the input file is accessed via stdin).
But it would be nice to have the same trace as with other errors.
** File
*** Options for turning on/off checking the existence of files
*** Option for ignoring non-existing files
*** Option for including existence-info for each file-path
    Precede each line with "+ " for existing, and "- " for non-existing
    files, e.g.
*** Strip ws at both ends of paths
*** Allow comments at end of line for lines with file
Reason it has not been done is,
1. lack of time
2. it could be useful to allow all form of names of files.
   Especially if file-existence is not check.  In that case,
   the comment character could be interpreted later down
   the pipe.
** Error messages
*** Surround source text by quotes
    This makes it easier to spot errors due to trailing space.
** Improve layout of pretty-printed tree
* Features
** Tags
*** filter: output all files, preceeded by info about filter-match
    Preceede each file with, e.g. "+ " for files that satisfy the filter
    condition, and "- " for files that don't.
    Useful when all files must be processed somehow, but processing differes
    depending on filter satisfaction.
** stdin as FILE argument
File
** Flatten file
Generate an input file that is equivalent to the given argument
(regarding output from running the program in normal mode, on it)
but that consists of a single "flat" file - a file that contains
no INCLUDE instructions.

This could be usefull for getting an overview of file references,
or for debugging.

A variant of this is to print only INCLUDE instructions, to get
an overview of all references.

* Check current functionality
** Exporting of tags to following command line files
   Currently, I believe, tags are forwarded to later command line arguments.
   A consequence is that using a file as a single file argument may be
   different than using it as a second file argument.
   This may be good, since it is possible to "configure" later file by a
   first file.  But it may also be confusing.
   Perhaps it would be good with an option that makes it possible to both
   forward and not forward tags to later command line argument files.
* Build system
** Derive path of python3
** Support parallell builds
   Current, only one build is supported, since the file
   tests/common.m4.in
   is configured into
   tests/common.m4
   inside the source directory, and it contains a reference to the
   executable, which ideally should be put in the build directory.
* Config Management
** Sprid ut tester av taggar till de enskilda instruktionerna
   test-paketet tags ska föregå andra instruktioner o file-path.
