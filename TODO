-*- org -*-


* HOWTO implement a TODO
  1. Checkout new branch
  2. TDD impl functionality
     1. Setup new simptestcase test
     2. Add test to CMakeLists.txt
     3. Watch test fail
     4. Implement
     5. Refactor
  3. Write program help
  4. Remove item from this file.
* Defects
** <2014-06-01 sun> Handling of abolute file names
Currently, all file names are assumed to be relative.
A prefix is added to each name, consising of the path
from the command line current dir, to the file name.

* Improvements
** Output: supress all non-file output, e.g. PRINT
** Switch to print absolute file names
** Case insensitive instruction-names
** Strip ws at both ends of paths
** Better error messages
Should display hierarchy of included file.
** List
*** match file-nameusing reg-ex
* Features
** Command to print program version
** Switches for turning on/off checking the existence of files
** Command for displaying the inclusion-hierarchy
** Multiple command line FILE-arguments
   Names should be relative the location of each file.
   The option to print names relative the FILE argument causes trouble with
   this functionality, since these locations can be different among FILE
   arguments, causing the produced list to use different "anchor points".
** stdin as FILE argument
File
** Flatten file
Generate an input file that is equivalent to the given argument
(regarding output from running the program in normal mode, on it)
but that consists of a single "flat" file - a file that contains
no INCLUDE instructions.

This could be usefull for getting an overview of file references,
or for debugging.

A variant of this is to print only INCLUDE instructions, to get
an overview of all references.

** Associating tags with each file
Consists of two parts:
1. New instruction that produces no output:
   TAG <list of tags>
2. Switch to turn on output of tags

The first part sets a number of "tags" that will be associated with each file
up until a new TAG instruction.

In the output: each file will be preceded by the tags associated with it.

This feature could be usefull for combining information about different
categories of files using a single file list.
E.g. in which "phase" a file should be executed - "pre-install", "install",
"post-install".
Without this feature, categorizing files in this way requires a single
file list for each category.  And maintaining several files has some
drawbacks:
1. Difficulty to get an overview of all involved categories.
2. If a similair sub-directory structure is used for all categories,
   then this structure has to be repeated in each file
   (the INCLUDEs will be identical, except for concrete file-name).

* Build system
** Support parallell builds
   Current, only one build is supported, since the file
   tests/common.m4.in
   is configured into
   tests/common.m4
   inside the source directory, and it contains a reference to the
   executable, which ideally should be put in the build directory.
