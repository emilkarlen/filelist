-*- org -*-

* HOWTO implement a TODO
  1. Checkout new branch
  2. TDD impl functionality
     1. Setup new simptestcase test
     2. Add test to CMakeLists.txt
     3. Watch test fail
     4. Implement
     5. Refactor
  3. Write program help
  4. Remove item from this file.
* Defects
** Exiting with correct status if invalid options to @list
I believe this is not tested.
Use same strategy as for how the argparser is used for sub-commands (those of
@tags, e.g.).
** Handling of abolute file names
   Currently, all file names are assumed to be relative.
   A prefix is added to each name, consising of the path
   from the command line current dir, to the file name.

* Improvements
** Customize the instruction token
   Make it possible to specify the prefix for instruction lines via a command
   line switch.
** Allow comments at end of line for lines with file
Reason it has not been done is,
1. lack of time
2. it could be useful to allow all form of names of files.
   Especially if file-existence is not check.  In that case,
   the comment character could be interpreted later down
   the pipe.
** Strip ws at both ends of paths
** Tags
*** Command for printing the current tags
    Could have as options, line-prefix and -suffix.
*** Filter on tags
**** conditions
     The condition could be given by a single argument as a string.
     E.g. "all",  "any", "exactly".
***** print only paths that have _all_ the given tags
***** print only paths that have _exactly_ the given tags
** List
*** match file-name using reg-ex
** Include
*** absolute filenames
*** option to preserve home directory of that of the including file
    Usefull, e.g., for including a "standard list" that lists files that
    exist in many directories.
* Features
** Switches for turning on/off checking the existence of files
** stdin as FILE argument
File
** Flatten file
Generate an input file that is equivalent to the given argument
(regarding output from running the program in normal mode, on it)
but that consists of a single "flat" file - a file that contains
no INCLUDE instructions.

This could be usefull for getting an overview of file references,
or for debugging.

A variant of this is to print only INCLUDE instructions, to get
an overview of all references.

** Switch to give program that preprocesses files
Usefull, e.g., for using a macro language like m4.
** Instruction for exec a program and treating the result as files
* Build system
** Support parallell builds
   Current, only one build is supported, since the file
   tests/common.m4.in
   is configured into
   tests/common.m4
   inside the source directory, and it contains a reference to the
   executable, which ideally should be put in the build directory.
