-*- org -*-

* HOWTO implement a TODO
  1. Checkout new branch
  2. TDD impl functionality
     1. Setup new simptestcase test
     2. Add test to CMakeLists.txt
     3. Watch test fail
     4. Implement
     5. Refactor
  3. Write program help
  4. Remove item from this file.
* Check current functionality
** Exporting of tags to following files on the command line
   Currently, I believe, tags are forwarded to later command line arguments.
   A consequence is that using a file as a single file argument may be
   different than using it as a second file argument.
   This may be good, since it is possible to "configure" later file by a
   first file.  But it may also be confusing.
   Perhaps it would be good with an option that makes it possible to both
   forward and not forward tags to later command line argument files.
* Tests
** testcase command-line-parsing-of-empty-set may be impl in python
   This test cannot be implemented (or is difficult to implement) in
   simptest.
   But it should be possible to implement it purely in Python, using Python's
   test framework.
** Flytta listfiler till input/
   Och installera m ha M4_SETUP_INSTALL_DATA_AND_INPUT.
** Sprid ut tester av taggar till de enskilda instruktionerna
   test-paketet tags ska föregå andra instruktioner o file-path.
* Build system
** Derive path of python3
** Support parallell builds
   Current, only one build is supported, since the file
   tests/common.m4.in
   is configured into
   tests/common.m4
   inside the source directory, and it contains a reference to the
   executable, which ideally should be put in the build directory.
* Config Management
** Se till att alla filer inkluderas i git-repot
... även de tomma kataloger som används av tester. 

** simptestcase ska inkluderas i distributionen
   Dvs Testerna ska inte vara beroende av att korrekt version av simptest är
   installerad i systemet - distributionen ska vara oberoende av simptest.
   Ta bort beroendena från CMakeLists.txt.
* After v 1.0
** List
*** Improve match-expression
**** Support more file-types (today only f,d)
     May need to decide whether to follow sym-links or not - use stat or
     lstat.
**** Complex expressions à la find
     Not, parenthasis, etc.
** Print inclusion-hierarchy
*** "Listen to" RenditionEnvironment: rendition of paths
- absolute paths
- normalise paths
Do this for non-pretty output.
** File
*** Option for including existence-info for each file-path
    Precede each line with "+ " for existing, and "- " for non-existing
    files, e.g.
*** filter: output all files, preceeded by info about filter-match
    Preceede each file with, e.g. "+ " for files that satisfy the filter
    condition, and "- " for files that don't.
    Useful when all files must be processed somehow, but processing differes
    depending on filter satisfaction.
